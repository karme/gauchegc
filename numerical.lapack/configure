#!/usr/bin/env gosh
;; Configuring lapack
;; Run ./configure (or gosh ./configure) to generate Makefiles.

(use gauche.configure)

;; Define extra --with-PACKAGE and --enable-FEATURE options.
;; These should come before cf-init so that cf-init can construct
;; proper usage string.
(cf-arg-with 'local
             (cf-help-string
              "--with-local=PATH:PATH..."
              "For each PATH, add PATH/include to the include search
  paths and PATH/lib to the library search paths.  Useful if you have some
  libraries installed in non-standard places. ")
             (^[with-local]
               (unless (member with-local '("yes" "no" ""))
                 (cf-subst 'LOCAL_PATHS with-local)))
             (^[] (cf-subst 'LOCAL_PATHS "")))

(cf-arg-with 'lapacklib
             (cf-help-string
              "--with-lapacklib=..."
              "linker option for lapack and blas. For example,
   --with-lapacklib=' -L/usr/opt/lib -llapack -lblas'   
You need a space in front of `-L', otherwise you'll get an error.")
             (^[with-lapack]
               #;(print #"lapack:~|with-lapack|")
               (cf-subst 'LAPACKLIBS with-lapack))
             (^[]            #f))

;; Initialize configure.  This creates the global context, parses
;; command-line args and sets up default values.
(cf-init "ggc.numerical.lapack" "1.1" "skimu@mac.com")

;; Set up gauche related commands.  The commands are set by scanning
;; PATH.  You can override them by "GOSH=/my/gosh ./configure" etc.
;; These variables may contain spaces in the pathnames (especially on
;; Windows); Makefile.ins and other files that refer to those variables
;; have to quote them properly.
(cf-path-prog 'GOSH            "gosh")
(cf-path-prog 'GAUCHE_CONFIG   "gauche-config")
(cf-path-prog 'GAUCHE_PACKAGE  "gauche-package")
(cf-path-prog 'GAUCHE_INSTALL  "gauche-install")
(cf-path-prog 'GAUCHE_CESCONV  "gauche-cesconv")

;; Some common parameters
(cf-subst 'SOEXT  (gauche-config "--so-suffix"))
(cf-subst 'OBJEXT (gauche-config "--object-suffix"))
(cf-subst 'EXEEXT (gauche-config "--executable-suffix"))

(cf-subst 'default_prefix (gauche-config "--prefix"))
 
(cf-subst 'GAUCHE_PKGINCDIR  (gauche-config "--pkgincdir"))
(cf-subst 'GAUCHE_PKGLIBDIR  (gauche-config "--pkglibdir"))
(cf-subst 'GAUCHE_PKGARCHDIR (gauche-config "--pkgarchdir"))

(define (arch~ x) (string-scan (gauche-architecture) x))

(define (os-version . str)
  (if (null? str)
      (os-version (gauche-architecture))
      (cond ((rxmatch->string #/\d+(\.\d+)*$/ (car str))
             => (lambda (str)
                  (map x->number (string-split str #\.))))
            (else #f))))

;; (os-version "x86_64-apple-darwin15.0.0") => (15 0 0)
;; (os-version "x86-unknown-netbsd") => #f
;; (os-version "x86-unknown-netbsd1.6") => (1 6)
;; (os-version "sparc-sun-solaris2")    => (2)

(define (version-major ver) (list-ref ver 0))
(define (version-minor ver) (list-ref ver 1))

(if (not (cf-have-subst? 'LAPACKLIBS))
    (cond ((arch~ "darwin")
           (if (>= (version-major (os-version)) 15)
               (cf-subst 'LAPACKLIBS "-framework Accelerate")
               (cf-subst 'LAPACKLIBS "-framework veclib")))
          ((arch~ "netbsd1.6") (cf-subst 'LAPACKLIBS "-Wl,-rpath /usr/pkg/lib -L/usr/pkg/lib -llapack -lblas -lg2c"))
          ((arch~ "solaris2")  (cf-subst 'LAPACKLIBS "-L/usr/local/lib -llapack -lblas"))
          ((arch~ "linux")     (cf-subst 'LAPACKLIBS "-Wl,-rpath /apps/free/lapack/3.4.2/lib -L/apps/free/lapack/3.4.2/lib -llapack -lblas"))
          ((arch~ "linux")     (cf-subst 'LAPACKLIBS "-Wl,-rpath /usr/local/lib -L/usr/local/lib -llapack -lblas"))
          (else                (cf-subst 'LAPACKLIBS ""))))

;; Output
(cf-make-gpd)
(cf-echo (cf$ 'PACKAGE_VERSION) > "VERSION")
(cf-output "Makefile")

;; Local variables:
;; mode: scheme
;; end:
