#!/usr/bin/env gosh
; -*-Scheme-*-
(use gauche.process)
(use ggc.util)
(use ggc.file.bdf)

;;(add-load-path ".")
;;(load "bdf.scm")
;;(import ggc.file.bdf)

(define (print-char char)
  ;; glyph is called "char"...
  (let* ((bbx    (bdf-char-bbx char))
         (dwidth (bdf-char-dwidth char))
         (w      (car dwidth)))
    (format #t "Name: ~s~%"       (bdf-char-name char))
    (format #t "  Encoding: ~s, " (bdf-char-encoding char))
    (format #t "Swidth: ~a, "     (bdf-char-swidth char))
    (format #t "Dwidth: ~a, "     dwidth)
    (format #t "BBX: ~a~%"      bbx)
    (show-bitmap bbx (bdf-char-bitmap char))))

(define (show-bitmap bbx bitmap)
  (let* ((w (list-ref bbx 0))
         (h (list-ref bbx 1))
         (x (list-ref bbx 2))
         (y (list-ref bbx 3))
         (nob (cond ((<= w 8) 8)
                    ((<= w 16) 16)
                    ((<= w 24) 24)
                    ((<= w 32) 32)
                    ((<= w 40) 40)
                    ((<= w 48) 48)
                    (else (error "width too long to print")))))
    (display "        ")
    (display "0011223344556677889900112233445566778899001122334455")
    (newline)
    (newline)
    (for-each (lambda (b)
                (display "        ")
                (do ((i (- nob 1)  (- i 1))
                     (c w (- c 1)))
                    ((= c 0) #t)
                  (if (logbit? i b)
                      (display "OO")
                      (display "..")))
                (newline))
              bitmap)
    (newline)))

(define *xfs-server* "tcp/localhost:7100")

(define (read-bdf-from-xfs fn)
  (let ((cmd (string-append "fstobdf -server " *xfs-server* 
                            " -fn " fn)))
    (with-input-from-process cmd read-bdf)))

(define (bdfdump bdf)
  (format #t "Version: ~a~%"     (bdf-version bdf))
  (format #t "Font: ~a~%"        (bdf-font bdf))
  (format #t "Size: ~s~%"        (bdf-size bdf))
  (format #t "FontBoundingBox: ~s~%" (bdf-fontboundingbox bdf))
  (format #t "Chars: ~a~%"       (bdf-chars bdf))
  (for-each-char print-char bdf))

(define (main args)
  (let ((bdf (if (= (length args) 2)
                 (if (file-exists? (cadr args))
                     (with-input-from-file (cadr args) read-bdf)
                     (read-bdf-from-xfs (cadr args)))
                 (read-bdf))))
    (bdfdump bdf)
    0))

;;; EOF
