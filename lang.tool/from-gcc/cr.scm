(define (skip-spaces)
  (let loop ((c (peek-char)))
    (if (and (not (eof-object? c))
	     (or (char=? c #\space)
		 (char=? c #\tab)
		 (char=? c #\x0b)	; VT  
		 (char=? c #\page)
		 (char=? c #\newline)))
        (begin
          (read-char)
          (loop (peek-char))))))

(define (skip-to-%%)
  (do ((l (read-line) (read-line)))
      ((#/^%%/ l) #t)
    (display l)
    (newline)))

(define (read-word l)
  (let ((c (peek-char)))
    (cond 
     ((eof-object? c)
      (string->symbol (apply string (reverse l))))
     ((char-set-contains? #[A-Za-z*~!+\-/\^&%=?<>0-9_] c)
      (read-char)
      (read-word (cons c l)))
     ;;((char=? c #\_)
     ;;(read-char)
     ;;(read-word (cons #\- l)))
     (else
      (string->symbol (apply string (reverse l)))))))

(define (read-y-rule)
  (skip-spaces)
  (let lp ((c (read-char))
	   (l '()))
    (cond
     ((eof-object? c)     (reverse l))
     ((char=? c #\;)      (reverse l))
     ((char=? c #\:) 
      (skip-spaces)
      (lp (read-char) (cons c l)))
     ((char=? c #\|)
      (skip-spaces)
      (lp (read-char) (cons c l)))
     ((and (char=? c #\%) (char=? (peek-char) #\%))
      (if (null? l) 
          (begin (read-char) '())
          (error "Malformed rule")))
     ((char-set-contains? #[A-Za-z*~!+\-/\^&%=?<>_] c) 
      (let ((s (read-word (list c))))
        (skip-spaces)
	(lp (read-char) (cons s l))))
     ;;((char=? c #\_)
     ;; (let ((s  (read-word (list #\-))))
     ;;   (lp (read-char) (cons s l))))
     (else 
      (error "suspicious character" c)
      '()))))

(define (y->Lalr y) 
  (if (not (char=? (cadr y) #\:))
      (error "malformed rule")
      (let lp ((x (cddr y))
               (z '())
               (l (list (car y))))
        (cond
         ((null? x)
          (reverse (cons (reverse z) l)))
         ((and (symbol? (car x))
               (eq? (car x) '%prec))
          (lp (cddr x) (cons (list 'prec: (cadr x)) z) l))
         ((and (char? (car x))
               (char=? (car x) #\|))
          (lp (cdr x) '() (cons (reverse z) l)))
         ((symbol? (car x))
          (lp (cdr x) (cons (car x) z) l))
         (else
          (error "suspicious character"))))))

(define (ppr r)
  (display "(")
  (display (car r))
  (newline)
  (map (lambda (e)
	 (display " ")
	 (display e)
	 (newline))
       (cdr r))
  (display ")")
  (newline))

(define (cr)
  (do ((y (read-y-rule) (read-y-rule)))
      ((null? y) #t)
    (ppr (y->Lalr y))))

(define (main argc)
  (skip-to-%%)
  (cr)
  (do ((c (read-char) (read-char)))
      ((eof-object? c) 0)
    (display c)))
